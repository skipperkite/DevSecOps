pipeline {
    agent any

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {

        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Checkout Code") {
            steps {
                git branch: 'main', url: 'https://github.com/skipperkite/DevSecOps.git'
            }
        }

        stage("Secrets Leak Check (Gitleaks)") {
            steps {
                sh 'gitleaks detect --source . --report-format sarif --report-path gitleaks.sarif || true'
            }
        }

        stage("Install Node Dependencies") {
            steps {
                sh 'npm ci'
            }
        }

        stage("Unit Testing") {
            steps {
                sh 'npm test'
            }
        }

        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=zomato \
                        -Dsonar.projectName=zomato'''
                }
            }
        }

        stage("Sonar Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-scanner-id'
                }
            }
        }

        stage("OWASP Dependency Check") {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --project ZomatoApp -n --format HTML', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Dockerfile Scan (Hadolint)") {
            steps {
                sh 'hadolint Dockerfile || true'
            }
        }

        stage("Build Docker Image") {
            steps {
                sh 'docker build -t zomato .'
            }
        }

        stage("Trivy Scan (Docker Image)") {
            steps {
                sh 'trivy image zomato > trivy-image.txt || true'
            }
        }

        stage("Smoke Test (Docker Container)") {
            steps {
                sh '''
                docker run -d --rm --name zomato-smoke -p 3000:3000 zomato
                sleep 10
                curl --fail http://localhost:3000 || (echo "‚ùå Smoke test failed" && exit 1)
                docker stop zomato-smoke
                '''
            }
        }

        stage("Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        sh '''
                        docker tag zomato saisaravana/zomato:latest
                        docker push saisaravana/zomato:latest
                        '''
                    }
                }
            }
        }

        stage("Docker Scout Insights") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh '''
                        docker-scout quickview saisaravana/zomato:latest
                        docker-scout cves saisaravana/zomato:latest
                        docker-scout recommendations saisaravana/zomato:latest
                        '''
                    }
                }
            }
        }

        stage("Deploy to Container") {
            steps {
                sh 'docker run -d --name zomato -p 3000:3000 saisaravana/zomato:latest'
            }
        }
    }

    post {
        always {
            emailext(
                subject: "'${currentBuild.result}' for Job: ${env.JOB_NAME} [#${env.BUILD_NUMBER}]",
                body: """
                    <html>
                      <body>
                        <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build #:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Result:</strong> ${currentBuild.result}</p>
                        <p><strong>Link:</strong> <a href='${env.BUILD_URL}'>View Build</a></p>
                      </body>
                    </html>
                """,
                mimeType: 'text/html',
                to: 'ssaissaravana@gmail.com'
            )
        }
    }
}
